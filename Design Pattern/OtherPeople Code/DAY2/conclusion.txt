// 디자인 패턴의 핵심 #1. 공통성과 가변성의 분리

// => 변하지 않은 코드 내부의 변하는 것을 찾아서 분리하는 것


// 변하는 것을 어떻게 분리할것인가 ?

// 1. 가상함수로 분리
// => 파생 클래스를 만들어서 가상함수 override 하라는 것
// => template method, factory method


// 2. 다른 클래스로 분리
// => strategy, policy base design
// => state, builder

// strategy           : 인터페이스를 사용해서 정책 클래스 교체
// policy base design : template 인자를 사용해서 정책 클래스 교체
//						(C++ Idioms)


// 참고 : 가상함수!!
// => 프로그램에서 가끔 호출된다면 사용해도 문제 되지 않습니다.

// => 루프안에서 수천~수만번 호출되는 경우는 가상함수는 오버헤드가 큽니다.
// => STL 같은 범용적인(표준) 라이브러리를 설계하는 경우도 가상함수가 거의 없습니다.


// 디자인 패턴의 핵심 #2. 공통의 기반 클래스를 만드는 경우가 많이 있습니다.
// => Folder 는 File를 포함하지만 Folder 자신도 포함(재귀적 포함)할수 있다.
// => Folder 와 File은 공통의 기반 클래스 필요

// 왜 재귀적 포함을 사용하는가에 따라 패턴이 달라 집니다.
// 의도가 중요

// composite : 재귀적 포함을 사용한 "복합객체" 만들기
// decorator : 재귀적 포함을 사용한 "객체에 기능" 추가