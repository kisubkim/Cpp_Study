// 디자인 패턴의 핵심 #1. 공통성과 가변성의 분리
// => 변하지 않은 코드 내부의 변하는 것을 찾아서 분리하는 것



// 변하는 것을 어떻게 분리할것인가 ?

// 1. 가상함수로 분리
// => 파생 클래스를 만들어서 가상함수 override 하라는 것
// => template method, factory method


// 2. 다른 클래스로 분리
// => 클래스가 사용하는 어떤 정책을 다른 클래스로 분리하는 방법
// => strategy, policy base design

// => 정책을 담을 클래스를 어떻게 교체할것인가 ?
// strategy           : 인터페이스를 사용해서 정책 클래스 교체
// policy base design : template 인자를 사용해서 정책 클래스 교체
//						(C++ Idioms)



// 참고 : 가상함수!!
// => 프로그램에서 가끔 호출된다면 사용해도 문제 되지 않습니다.
// => 루프안에서 수천~수만번 호출되는 경우는 가상함수는 오버헤드가 큽니다.

