// 디자인 패턴의 핵심 #1. 공통성과 가변성의 분리
// => 변하지 않은 코드 내부의 변하는 것을 찾아서 분리하는 것



// 변하는 것을 어떻게 분리할것인가 ?

// 1. 가상함수로 분리
// => 파생 클래스를 만들어서 가상함수 override 하라는 것
// => template method, factory method


// 2. 다른 클래스로 분리
// => 클래스가 사용하는 어떤 정책을 다른 클래스로 분리하는 방법
// => strategy, policy base design

// => 정책을 담을 클래스를 어떻게 교체할것인가 ?
// strategy           : 인터페이스를 사용해서 정책 클래스 교체
// policy base design : template 인자를 사용해서 정책 클래스 교체
//						(C++ Idioms)



// 참고 : 가상함수!!
// => 프로그램에서 가끔 호출된다면 사용해도 문제 되지 않습니다.
// => 루프안에서 수천~수만번 호출되는 경우는 가상함수는 오버헤드가 큽니다.


// 디자인패턴의 핵심 #2. 재귀적인 포함을 사용하는 경우가 많습니다.
// => Folder 는 File을 보관하지만 Folder 자신도 보관
// => origin 객체 기능추가 가능, 추가된 객체에 또 추가 가능

// => 핵심 : Folder 와 File은 공통의 기반 클래스 필요
// => 핵심 : origin 과 Decorator도 공통의 기반 클래스 필요

// 왜 ?? 어떤 "의도"로 재귀적 포함을 사용하는가 ?

// composite : 재귀적 포함을 사용해서 "복합객체" - 객체 여러개 보관
// decorator : 재귀적 포함을 사용해서 객체에 "기능 추가" 
//			   한개의 객체에 "동작" 추가. 


// 디자인패턴의 핵심 #3. "간접층의 도입"